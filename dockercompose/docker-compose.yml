services:
  read:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ./observability/loki/loki-config.yml:/etc/loki/config.yml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      petshop:
        aliases:
          - loki

  write:
    image: grafana/loki:2.9.2
    command: "-config.file=/etc/loki/config.yml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ./observability/loki/loki-config.yml:/etc/loki/config.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  promtail:
    image: grafana/promtail:2.9.2
    volumes:
      - ./observability/promtail/promtail-local-config.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service

  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service


  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ./observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1

        events {
          worker_connections   1000;
        }

        http {
          resolver 127.0.0.11;

          server {
            listen             3100;

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  configserver:
    image: "luisfelipealves/configserver:v1"
    container_name: configserver-ms
    ports:
      - "8071:8071"
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config

#  redis:
#    image: redis
#    ports:
#      - "6379:6379"
#    healthcheck:
#      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
#      timeout: 10s
#      retries: 10
#    extends:
#      file: common-config.yml
#      service: network-deploy-service

  eurekaserver:
    image: "luisfelipealves/eurekaserver:v1"
    container_name: eurekaserver-ms
    ports:
      - "8070:8070"
    healthcheck:
      test: "curl --fail --silent localhost:8070/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    depends_on:
      configserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"

  breeddb:
    container_name: breed-db
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: breeddb
    extends:
      file: common-config.yml
      service: microservice-db-config

  breeds:
    image: "luisfelipealves/breeds:v1"
    container_name: breeds-ms
    ports:
      - "8080:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "breeds"
      SPRING_DATASOURCE_URL: "jdbc:mysql://breeddb:3306/breeddb"
    depends_on:
      eurekaserver:
        condition: service_healthy
      breeddb:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  breeds1:
    image: "luisfelipealves/breeds:v1"
    container_name: breeds1-ms
    ports:
      - "8081:8080"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "breeds"
      SPRING_DATASOURCE_URL: "jdbc:mysql://breeddb:3306/breeddb"
    depends_on:
      eurekaserver:
        condition: service_healthy
      breeddb:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  petdb:
    container_name: pet-db
    ports:
      - 3316:3306
    environment:
      MYSQL_DATABASE: petdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  pets:
    image: "luisfelipealves/pets:v1"
    container_name: pets-ms
    ports:
      - "8090:8090"
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "pets"
      SPRING_DATASOURCE_URL: "jdbc:mysql://petdb:3306/petdb"
    depends_on:
      eurekaserver:
        condition: service_healthy
      petdb:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config

#  vaccinedb:
#    container_name: vaccine-db
#    ports:
#      - 3326:3306
#    environment:
#      MYSQL_DATABASE: vaccinedb
#    extends:
#      file: common-config.yml
#      service: microservice-db-config

  gatewayserver:
    image: "luisfelipealves/gatewayserver:v1"
    container_name: gatewayserver
    ports:
      - "8072:8072"
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
#      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
#      SPRING_DATA_REDIS_HOST: redis
#      SPRING_DATA_REDIS_PORT: 6379
#      SPRING_DATA_REDIS_TIMEOUT: 1s
    depends_on:
#      redis:
#        condition: service_healthy
      breeds:
        condition: service_healthy
      pets:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config

networks:
  petshop:
    driver: "bridge"